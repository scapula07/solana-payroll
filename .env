import { Account, PublicKey } from "@solana/web3.js";
import { Anchor } from "@solana/solana-web3.js";

const programId = new PublicKey("Your Anchor program ID");
const payrollAccount = new Account();

async function main() {
  const connection = new Anchor("http://testnet.solana.com:8899");

  // Initialize the payroll account with some lamports
  await connection.requestAirdrop(payrollAccount.publicKey, 1000);

  // Add a new employee to the payroll system
  const employeeAccount = new Account();
  await connection.invoke(
    payrollAccount.publicKey,
    programId,
    {
      addEmployee: [
        employeeAccount.publicKey,
        employeeAccount.publicKey,
        100,
      ],
    },
    payrollAccount
  );

  // Pay the employee
  await connection.invoke(
    payrollAccount.publicKey,
    programId,
    {
      payEmployee: [employeeAccount.publicKey, 50],
    },
    payrollAccount
  );

  // Check the employee's balance
  const balance = await connection.getBalance(employeeAccount.publicKey);
  console.log(`Employee balance: ${balance}`);
}

main();




use solana_sdk::{
    account::Account,
    program_utils::{decode_error, encode_error, next_keyed_account, program_error},
};
use solana_sdk::pubkey::Pubkey;

const ADD_EMPLOYEE_KEY: [u8; 4] = [0, 0, 0, 1];
const PAY_EMPLOYEE_KEY: [u8; 4] = [0, 0, 0, 2];

fn add_employee(
    payroll_key: &Pubkey,
    employee_key: &Pubkey,
    employee_lamports: u64,
    accounts: &[Account],
) -> Result<(), ProgramError> {
    let payroll_account = next_keyed_account(accounts).ok_or(ProgramError::MissingData)?;

    let mut employee_account = next_keyed_account(accounts).ok_or(ProgramError::MissingData)?;
    employee_account.lamports = employee_lamports;
    employee_account.key = *employee_key;

    payroll_account.data.extend_from_slice(&encode_error(&employee_account)?);
    Ok(())
}

fn pay_employee(
    payroll_key: &Pubkey,
    employee_key: &Pubkey,
    amount: u64,
    accounts: &[Account],
) -> Result<(), ProgramError> {
    let payroll_account = next_keyed_account(accounts).ok_or(ProgramError::MissingData)?;

    let mut data_index = 0;
    while data_index < payroll_account.data.len() {
        let (employee_account, data_index_delta) =
            decode_error::<Account>(&payroll_account.data[data_index..])?;
        if employee_account.key == *employee_key {
            if employee_account.lamports < amount {
                return Err(ProgramError::InsufficientFunds);
            }
            employee_account.lamports -= amount;
            let encoded = encode_error(&employee_account)?;
            payroll_account.data[data_index..data_index + encoded.len()].copy_from_slice(&encoded);
            return Ok(());
        }
        data_index += data_index_delta;
    }

    Err(ProgramError::DataNotFound)
}

#[no_mangle]
pub extern "C" fn entrypoint(input: &[u8]) -> Result<(), ProgramError> {
    let (payroll_key, instruction_data, accounts) = solana_sdk::program_entrypoint(input)?;

    match instruction_data {
        ADD_EMPLOYEE_KEY => {
            let (employee_key, employee_lamports) = solana_sdk::pubkey_and_u64_from_instruction_data(&instruction_data[4..])?;
            add_employee(&payroll_key, &employee_key, employee_lamports, &accounts)
        }
        PAY_EMPLOYEE_KEY => {
let (employee_key, amount) = solana_sdk::pubkey_and_u64_from_instruction_data(&instruction_data[4..])?;
pay_employee(&payroll_key, &employee_key, amount, &accounts)
}
_ => Err(ProgramError::InvalidInstruction),
}
}
